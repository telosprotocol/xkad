// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_node_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_node_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AllNodes_Node;
}  // namespace protobuf_node_2eproto
namespace top {
namespace kadmlia {
namespace test {
namespace pb {
class AllNodes_NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllNodes_Node>
      _instance;
} _AllNodes_Node_default_instance_;
class AllNodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllNodes>
      _instance;
} _AllNodes_default_instance_;
class TestReportNodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestReportNodes>
      _instance;
} _TestReportNodes_default_instance_;
class TestConnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestConnRequest>
      _instance;
} _TestConnRequest_default_instance_;
class TestConnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestConnResponse>
      _instance;
} _TestConnResponse_default_instance_;
class TestConn2RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestConn2Request>
      _instance;
} _TestConn2Request_default_instance_;
class TestConn2ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestConn2Response>
      _instance;
} _TestConn2Response_default_instance_;
}  // namespace pb
}  // namespace test
}  // namespace kadmlia
}  // namespace top
namespace protobuf_node_2eproto {
static void InitDefaultsAllNodes_Node() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_AllNodes_Node_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::AllNodes_Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::AllNodes_Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllNodes_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllNodes_Node}, {}};

static void InitDefaultsAllNodes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_AllNodes_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::AllNodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::AllNodes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AllNodes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAllNodes}, {
      &protobuf_node_2eproto::scc_info_AllNodes_Node.base,}};

static void InitDefaultsTestReportNodes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_TestReportNodes_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::TestReportNodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::TestReportNodes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestReportNodes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestReportNodes}, {}};

static void InitDefaultsTestConnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_TestConnRequest_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::TestConnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::TestConnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestConnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestConnRequest}, {}};

static void InitDefaultsTestConnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_TestConnResponse_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::TestConnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::TestConnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestConnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestConnResponse}, {}};

static void InitDefaultsTestConn2Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_TestConn2Request_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::TestConn2Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::TestConn2Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestConn2Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestConn2Request}, {}};

static void InitDefaultsTestConn2Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::test::pb::_TestConn2Response_default_instance_;
    new (ptr) ::top::kadmlia::test::pb::TestConn2Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::test::pb::TestConn2Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestConn2Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestConn2Response}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AllNodes_Node.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllNodes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestReportNodes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestConnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestConnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestConn2Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestConn2Response.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, local_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, public_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, service_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, nat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes_Node, node_id_),
  0,
  3,
  1,
  4,
  5,
  6,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::AllNodes, nodes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestReportNodes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestReportNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestReportNodes, nodes_size_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnRequest, tp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnRequest, src_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnRequest, src_port_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnResponse, tp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnResponse, hops1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnResponse, src_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConnResponse, src_port_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Request, tp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Request, send_or_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Request, src_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Request, src_port_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Response, tp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Response, hops1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::top::kadmlia::test::pb::TestConn2Response, send_or_relay_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::top::kadmlia::test::pb::AllNodes_Node)},
  { 19, 25, sizeof(::top::kadmlia::test::pb::AllNodes)},
  { 26, 32, sizeof(::top::kadmlia::test::pb::TestReportNodes)},
  { 33, 41, sizeof(::top::kadmlia::test::pb::TestConnRequest)},
  { 44, 53, sizeof(::top::kadmlia::test::pb::TestConnResponse)},
  { 57, 66, sizeof(::top::kadmlia::test::pb::TestConn2Request)},
  { 70, 78, sizeof(::top::kadmlia::test::pb::TestConn2Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_AllNodes_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_AllNodes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_TestReportNodes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_TestConnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_TestConnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_TestConn2Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::top::kadmlia::test::pb::_TestConn2Response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "node.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nnode.proto\022\023top.kadmlia.test.pb\"\315\001\n\010Al"
      "lNodes\0221\n\005nodes\030\001 \003(\0132\".top.kadmlia.test"
      ".pb.AllNodes.Node\032\215\001\n\004Node\022\020\n\010local_ip\030\001"
      " \002(\t\022\022\n\nlocal_port\030\002 \002(\005\022\021\n\tpublic_ip\030\003 "
      "\002(\t\022\023\n\013public_port\030\004 \002(\005\022\024\n\014service_type"
      "\030\005 \002(\004\022\020\n\010nat_type\030\006 \002(\005\022\017\n\007node_id\030\n \002("
      "\014\"%\n\017TestReportNodes\022\022\n\nnodes_size\030\001 \002(\005"
      "\"@\n\017TestConnRequest\022\013\n\003tp1\030\001 \002(\003\022\016\n\006src_"
      "ip\030\n \002(\t\022\020\n\010src_port\030\013 \002(\005\"P\n\020TestConnRe"
      "sponse\022\013\n\003tp1\030\001 \002(\003\022\r\n\005hops1\030\002 \002(\003\022\016\n\006sr"
      "c_ip\030\n \002(\t\022\020\n\010src_port\030\013 \002(\005\"X\n\020TestConn"
      "2Request\022\013\n\003tp1\030\001 \002(\003\022\025\n\rsend_or_relay\030\n"
      " \002(\010\022\016\n\006src_ip\030\013 \002(\t\022\020\n\010src_port\030\014 \002(\005\"F"
      "\n\021TestConn2Response\022\013\n\003tp1\030\001 \002(\003\022\r\n\005hops"
      "1\030\002 \002(\003\022\025\n\rsend_or_relay\030\n \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_node_2eproto
namespace top {
namespace kadmlia {
namespace test {
namespace pb {

// ===================================================================

void AllNodes_Node::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllNodes_Node::kLocalIpFieldNumber;
const int AllNodes_Node::kLocalPortFieldNumber;
const int AllNodes_Node::kPublicIpFieldNumber;
const int AllNodes_Node::kPublicPortFieldNumber;
const int AllNodes_Node::kServiceTypeFieldNumber;
const int AllNodes_Node::kNatTypeFieldNumber;
const int AllNodes_Node::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllNodes_Node::AllNodes_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_AllNodes_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.AllNodes.Node)
}
AllNodes_Node::AllNodes_Node(const AllNodes_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ip()) {
    local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
  }
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_id()) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  ::memcpy(&local_port_, &from.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&nat_type_) -
    reinterpret_cast<char*>(&local_port_)) + sizeof(nat_type_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.AllNodes.Node)
}

void AllNodes_Node::SharedCtor() {
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nat_type_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(nat_type_));
}

AllNodes_Node::~AllNodes_Node() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.AllNodes.Node)
  SharedDtor();
}

void AllNodes_Node::SharedDtor() {
  local_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllNodes_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllNodes_Node::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllNodes_Node& AllNodes_Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_AllNodes_Node.base);
  return *internal_default_instance();
}


void AllNodes_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.AllNodes.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      local_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      public_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&local_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nat_type_) -
        reinterpret_cast<char*>(&local_port_)) + sizeof(nat_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AllNodes_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.AllNodes.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_ip().data(), static_cast<int>(this->local_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top.kadmlia.test.pb.AllNodes.Node.local_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 local_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_local_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string public_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_ip().data(), static_cast<int>(this->public_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top.kadmlia.test.pb.AllNodes.Node.public_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 public_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_public_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 service_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_service_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &service_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nat_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes node_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.AllNodes.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.AllNodes.Node)
  return false;
#undef DO_
}

void AllNodes_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.AllNodes.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string local_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_ip().data(), static_cast<int>(this->local_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.AllNodes.Node.local_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->local_ip(), output);
  }

  // required int32 local_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->local_port(), output);
  }

  // required string public_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), static_cast<int>(this->public_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.AllNodes.Node.public_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->public_ip(), output);
  }

  // required int32 public_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->public_port(), output);
  }

  // required uint64 service_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->service_type(), output);
  }

  // required int32 nat_type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nat_type(), output);
  }

  // required bytes node_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.AllNodes.Node)
}

::google::protobuf::uint8* AllNodes_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.AllNodes.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string local_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_ip().data(), static_cast<int>(this->local_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.AllNodes.Node.local_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_ip(), target);
  }

  // required int32 local_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->local_port(), target);
  }

  // required string public_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), static_cast<int>(this->public_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.AllNodes.Node.public_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->public_ip(), target);
  }

  // required int32 public_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->public_port(), target);
  }

  // required uint64 service_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->service_type(), target);
  }

  // required int32 nat_type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nat_type(), target);
  }

  // required bytes node_id = 10;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.AllNodes.Node)
  return target;
}

size_t AllNodes_Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:top.kadmlia.test.pb.AllNodes.Node)
  size_t total_size = 0;

  if (has_local_ip()) {
    // required string local_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_ip());
  }

  if (has_public_ip()) {
    // required string public_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_ip());
  }

  if (has_node_id()) {
    // required bytes node_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->node_id());
  }

  if (has_local_port()) {
    // required int32 local_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_port());
  }

  if (has_public_port()) {
    // required int32 public_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_port());
  }

  if (has_service_type()) {
    // required uint64 service_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->service_type());
  }

  if (has_nat_type()) {
    // required int32 nat_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nat_type());
  }

  return total_size;
}
size_t AllNodes_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.AllNodes.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string local_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_ip());

    // required string public_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_ip());

    // required bytes node_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->node_id());

    // required int32 local_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_port());

    // required int32 public_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_port());

    // required uint64 service_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->service_type());

    // required int32 nat_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nat_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllNodes_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.AllNodes.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const AllNodes_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllNodes_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.AllNodes.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.AllNodes.Node)
    MergeFrom(*source);
  }
}

void AllNodes_Node::MergeFrom(const AllNodes_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.AllNodes.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_local_ip();
      local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_node_id();
      node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      local_port_ = from.local_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      public_port_ = from.public_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      service_type_ = from.service_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      nat_type_ = from.nat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AllNodes_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.AllNodes.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllNodes_Node::CopyFrom(const AllNodes_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.AllNodes.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllNodes_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void AllNodes_Node::Swap(AllNodes_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllNodes_Node::InternalSwap(AllNodes_Node* other) {
  using std::swap;
  local_ip_.Swap(&other->local_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_port_, other->local_port_);
  swap(public_port_, other->public_port_);
  swap(service_type_, other->service_type_);
  swap(nat_type_, other->nat_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllNodes_Node::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllNodes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllNodes::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllNodes::AllNodes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_AllNodes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.AllNodes)
}
AllNodes::AllNodes(const AllNodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.AllNodes)
}

void AllNodes::SharedCtor() {
}

AllNodes::~AllNodes() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.AllNodes)
  SharedDtor();
}

void AllNodes::SharedDtor() {
}

void AllNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllNodes::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllNodes& AllNodes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_AllNodes.base);
  return *internal_default_instance();
}


void AllNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.AllNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AllNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.AllNodes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .top.kadmlia.test.pb.AllNodes.Node nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.AllNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.AllNodes)
  return false;
#undef DO_
}

void AllNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.AllNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .top.kadmlia.test.pb.AllNodes.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.AllNodes)
}

::google::protobuf::uint8* AllNodes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.AllNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .top.kadmlia.test.pb.AllNodes.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.AllNodes)
  return target;
}

size_t AllNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.AllNodes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .top.kadmlia.test.pb.AllNodes.Node nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllNodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.AllNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const AllNodes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllNodes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.AllNodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.AllNodes)
    MergeFrom(*source);
  }
}

void AllNodes::MergeFrom(const AllNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.AllNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void AllNodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.AllNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllNodes::CopyFrom(const AllNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.AllNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllNodes::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  return true;
}

void AllNodes::Swap(AllNodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllNodes::InternalSwap(AllNodes* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllNodes::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestReportNodes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestReportNodes::kNodesSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestReportNodes::TestReportNodes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_TestReportNodes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.TestReportNodes)
}
TestReportNodes::TestReportNodes(const TestReportNodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_size_ = from.nodes_size_;
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.TestReportNodes)
}

void TestReportNodes::SharedCtor() {
  nodes_size_ = 0;
}

TestReportNodes::~TestReportNodes() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.TestReportNodes)
  SharedDtor();
}

void TestReportNodes::SharedDtor() {
}

void TestReportNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestReportNodes::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestReportNodes& TestReportNodes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_TestReportNodes.base);
  return *internal_default_instance();
}


void TestReportNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.TestReportNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestReportNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.TestReportNodes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nodes_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nodes_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodes_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.TestReportNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.TestReportNodes)
  return false;
#undef DO_
}

void TestReportNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.TestReportNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nodes_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nodes_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.TestReportNodes)
}

::google::protobuf::uint8* TestReportNodes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.TestReportNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nodes_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nodes_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.TestReportNodes)
  return target;
}

size_t TestReportNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.TestReportNodes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 nodes_size = 1;
  if (has_nodes_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nodes_size());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReportNodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.TestReportNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReportNodes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestReportNodes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.TestReportNodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.TestReportNodes)
    MergeFrom(*source);
  }
}

void TestReportNodes::MergeFrom(const TestReportNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.TestReportNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nodes_size()) {
    set_nodes_size(from.nodes_size());
  }
}

void TestReportNodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.TestReportNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReportNodes::CopyFrom(const TestReportNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.TestReportNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReportNodes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TestReportNodes::Swap(TestReportNodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestReportNodes::InternalSwap(TestReportNodes* other) {
  using std::swap;
  swap(nodes_size_, other->nodes_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestReportNodes::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestConnRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConnRequest::kTp1FieldNumber;
const int TestConnRequest::kSrcIpFieldNumber;
const int TestConnRequest::kSrcPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConnRequest::TestConnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_TestConnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.TestConnRequest)
}
TestConnRequest::TestConnRequest(const TestConnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_ip()) {
    src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
  }
  ::memcpy(&tp1_, &from.tp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_port_) -
    reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.TestConnRequest)
}

void TestConnRequest::SharedCtor() {
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_port_) -
      reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
}

TestConnRequest::~TestConnRequest() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.TestConnRequest)
  SharedDtor();
}

void TestConnRequest::SharedDtor() {
  src_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestConnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestConnRequest::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestConnRequest& TestConnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_TestConnRequest.base);
  return *internal_default_instance();
}


void TestConnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.TestConnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&tp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&src_port_) -
        reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.TestConnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tp1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string src_ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_ip().data(), static_cast<int>(this->src_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top.kadmlia.test.pb.TestConnRequest.src_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 src_port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_src_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.TestConnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.TestConnRequest)
  return false;
#undef DO_
}

void TestConnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.TestConnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tp1(), output);
  }

  // required string src_ip = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.TestConnRequest.src_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->src_ip(), output);
  }

  // required int32 src_port = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->src_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.TestConnRequest)
}

::google::protobuf::uint8* TestConnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.TestConnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tp1(), target);
  }

  // required string src_ip = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.TestConnRequest.src_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->src_ip(), target);
  }

  // required int32 src_port = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->src_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.TestConnRequest)
  return target;
}

size_t TestConnRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:top.kadmlia.test.pb.TestConnRequest)
  size_t total_size = 0;

  if (has_src_ip()) {
    // required string src_ip = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());
  }

  if (has_tp1()) {
    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());
  }

  if (has_src_port()) {
    // required int32 src_port = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_port());
  }

  return total_size;
}
size_t TestConnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.TestConnRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string src_ip = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());

    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());

    // required int32 src_port = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.TestConnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestConnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestConnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.TestConnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.TestConnRequest)
    MergeFrom(*source);
  }
}

void TestConnRequest::MergeFrom(const TestConnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.TestConnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_ip();
      src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      tp1_ = from.tp1_;
    }
    if (cached_has_bits & 0x00000004u) {
      src_port_ = from.src_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.TestConnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConnRequest::CopyFrom(const TestConnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.TestConnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConnRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TestConnRequest::Swap(TestConnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConnRequest::InternalSwap(TestConnRequest* other) {
  using std::swap;
  src_ip_.Swap(&other->src_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tp1_, other->tp1_);
  swap(src_port_, other->src_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestConnRequest::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestConnResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConnResponse::kTp1FieldNumber;
const int TestConnResponse::kHops1FieldNumber;
const int TestConnResponse::kSrcIpFieldNumber;
const int TestConnResponse::kSrcPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConnResponse::TestConnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_TestConnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.TestConnResponse)
}
TestConnResponse::TestConnResponse(const TestConnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_ip()) {
    src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
  }
  ::memcpy(&tp1_, &from.tp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_port_) -
    reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.TestConnResponse)
}

void TestConnResponse::SharedCtor() {
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_port_) -
      reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
}

TestConnResponse::~TestConnResponse() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.TestConnResponse)
  SharedDtor();
}

void TestConnResponse::SharedDtor() {
  src_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestConnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestConnResponse::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestConnResponse& TestConnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_TestConnResponse.base);
  return *internal_default_instance();
}


void TestConnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.TestConnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&tp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&src_port_) -
        reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.TestConnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tp1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 hops1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hops1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hops1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string src_ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_ip().data(), static_cast<int>(this->src_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top.kadmlia.test.pb.TestConnResponse.src_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 src_port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_src_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.TestConnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.TestConnResponse)
  return false;
#undef DO_
}

void TestConnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.TestConnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tp1(), output);
  }

  // required int64 hops1 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hops1(), output);
  }

  // required string src_ip = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.TestConnResponse.src_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->src_ip(), output);
  }

  // required int32 src_port = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->src_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.TestConnResponse)
}

::google::protobuf::uint8* TestConnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.TestConnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tp1(), target);
  }

  // required int64 hops1 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hops1(), target);
  }

  // required string src_ip = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.TestConnResponse.src_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->src_ip(), target);
  }

  // required int32 src_port = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->src_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.TestConnResponse)
  return target;
}

size_t TestConnResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:top.kadmlia.test.pb.TestConnResponse)
  size_t total_size = 0;

  if (has_src_ip()) {
    // required string src_ip = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());
  }

  if (has_tp1()) {
    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());
  }

  if (has_hops1()) {
    // required int64 hops1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hops1());
  }

  if (has_src_port()) {
    // required int32 src_port = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_port());
  }

  return total_size;
}
size_t TestConnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.TestConnResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string src_ip = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());

    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());

    // required int64 hops1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hops1());

    // required int32 src_port = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.TestConnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestConnResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestConnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.TestConnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.TestConnResponse)
    MergeFrom(*source);
  }
}

void TestConnResponse::MergeFrom(const TestConnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.TestConnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_ip();
      src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      tp1_ = from.tp1_;
    }
    if (cached_has_bits & 0x00000004u) {
      hops1_ = from.hops1_;
    }
    if (cached_has_bits & 0x00000008u) {
      src_port_ = from.src_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.TestConnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConnResponse::CopyFrom(const TestConnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.TestConnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConnResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TestConnResponse::Swap(TestConnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConnResponse::InternalSwap(TestConnResponse* other) {
  using std::swap;
  src_ip_.Swap(&other->src_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tp1_, other->tp1_);
  swap(hops1_, other->hops1_);
  swap(src_port_, other->src_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestConnResponse::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestConn2Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConn2Request::kTp1FieldNumber;
const int TestConn2Request::kSendOrRelayFieldNumber;
const int TestConn2Request::kSrcIpFieldNumber;
const int TestConn2Request::kSrcPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConn2Request::TestConn2Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_TestConn2Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.TestConn2Request)
}
TestConn2Request::TestConn2Request(const TestConn2Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_ip()) {
    src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
  }
  ::memcpy(&tp1_, &from.tp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_port_) -
    reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.TestConn2Request)
}

void TestConn2Request::SharedCtor() {
  src_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_port_) -
      reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
}

TestConn2Request::~TestConn2Request() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.TestConn2Request)
  SharedDtor();
}

void TestConn2Request::SharedDtor() {
  src_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestConn2Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestConn2Request::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestConn2Request& TestConn2Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_TestConn2Request.base);
  return *internal_default_instance();
}


void TestConn2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.TestConn2Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    src_ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&tp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&src_port_) -
        reinterpret_cast<char*>(&tp1_)) + sizeof(src_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConn2Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.TestConn2Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tp1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool send_or_relay = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_send_or_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_or_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string src_ip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_ip().data(), static_cast<int>(this->src_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top.kadmlia.test.pb.TestConn2Request.src_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 src_port = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_src_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.TestConn2Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.TestConn2Request)
  return false;
#undef DO_
}

void TestConn2Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.TestConn2Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tp1(), output);
  }

  // required bool send_or_relay = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->send_or_relay(), output);
  }

  // required string src_ip = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.TestConn2Request.src_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->src_ip(), output);
  }

  // required int32 src_port = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->src_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.TestConn2Request)
}

::google::protobuf::uint8* TestConn2Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.TestConn2Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tp1(), target);
  }

  // required bool send_or_relay = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->send_or_relay(), target);
  }

  // required string src_ip = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ip().data(), static_cast<int>(this->src_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top.kadmlia.test.pb.TestConn2Request.src_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->src_ip(), target);
  }

  // required int32 src_port = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->src_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.TestConn2Request)
  return target;
}

size_t TestConn2Request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:top.kadmlia.test.pb.TestConn2Request)
  size_t total_size = 0;

  if (has_src_ip()) {
    // required string src_ip = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());
  }

  if (has_tp1()) {
    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());
  }

  if (has_send_or_relay()) {
    // required bool send_or_relay = 10;
    total_size += 1 + 1;
  }

  if (has_src_port()) {
    // required int32 src_port = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_port());
  }

  return total_size;
}
size_t TestConn2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.TestConn2Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string src_ip = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_ip());

    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());

    // required bool send_or_relay = 10;
    total_size += 1 + 1;

    // required int32 src_port = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConn2Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.TestConn2Request)
  GOOGLE_DCHECK_NE(&from, this);
  const TestConn2Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestConn2Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.TestConn2Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.TestConn2Request)
    MergeFrom(*source);
  }
}

void TestConn2Request::MergeFrom(const TestConn2Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.TestConn2Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_ip();
      src_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      tp1_ = from.tp1_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_or_relay_ = from.send_or_relay_;
    }
    if (cached_has_bits & 0x00000008u) {
      src_port_ = from.src_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConn2Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.TestConn2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConn2Request::CopyFrom(const TestConn2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.TestConn2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConn2Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TestConn2Request::Swap(TestConn2Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConn2Request::InternalSwap(TestConn2Request* other) {
  using std::swap;
  src_ip_.Swap(&other->src_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tp1_, other->tp1_);
  swap(send_or_relay_, other->send_or_relay_);
  swap(src_port_, other->src_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestConn2Request::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestConn2Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConn2Response::kTp1FieldNumber;
const int TestConn2Response::kHops1FieldNumber;
const int TestConn2Response::kSendOrRelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConn2Response::TestConn2Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_node_2eproto::scc_info_TestConn2Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:top.kadmlia.test.pb.TestConn2Response)
}
TestConn2Response::TestConn2Response(const TestConn2Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tp1_, &from.tp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_or_relay_) -
    reinterpret_cast<char*>(&tp1_)) + sizeof(send_or_relay_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.test.pb.TestConn2Response)
}

void TestConn2Response::SharedCtor() {
  ::memset(&tp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_or_relay_) -
      reinterpret_cast<char*>(&tp1_)) + sizeof(send_or_relay_));
}

TestConn2Response::~TestConn2Response() {
  // @@protoc_insertion_point(destructor:top.kadmlia.test.pb.TestConn2Response)
  SharedDtor();
}

void TestConn2Response::SharedDtor() {
}

void TestConn2Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestConn2Response::descriptor() {
  ::protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestConn2Response& TestConn2Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_node_2eproto::scc_info_TestConn2Response.base);
  return *internal_default_instance();
}


void TestConn2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.test.pb.TestConn2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&tp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_or_relay_) -
        reinterpret_cast<char*>(&tp1_)) + sizeof(send_or_relay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConn2Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:top.kadmlia.test.pb.TestConn2Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tp1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 hops1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hops1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hops1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool send_or_relay = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_send_or_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_or_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:top.kadmlia.test.pb.TestConn2Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:top.kadmlia.test.pb.TestConn2Response)
  return false;
#undef DO_
}

void TestConn2Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:top.kadmlia.test.pb.TestConn2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tp1(), output);
  }

  // required int64 hops1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hops1(), output);
  }

  // required bool send_or_relay = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->send_or_relay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:top.kadmlia.test.pb.TestConn2Response)
}

::google::protobuf::uint8* TestConn2Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.test.pb.TestConn2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 tp1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tp1(), target);
  }

  // required int64 hops1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hops1(), target);
  }

  // required bool send_or_relay = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->send_or_relay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.test.pb.TestConn2Response)
  return target;
}

size_t TestConn2Response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:top.kadmlia.test.pb.TestConn2Response)
  size_t total_size = 0;

  if (has_tp1()) {
    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());
  }

  if (has_hops1()) {
    // required int64 hops1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hops1());
  }

  if (has_send_or_relay()) {
    // required bool send_or_relay = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TestConn2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.test.pb.TestConn2Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 tp1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp1());

    // required int64 hops1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hops1());

    // required bool send_or_relay = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConn2Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.test.pb.TestConn2Response)
  GOOGLE_DCHECK_NE(&from, this);
  const TestConn2Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestConn2Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.test.pb.TestConn2Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.test.pb.TestConn2Response)
    MergeFrom(*source);
  }
}

void TestConn2Response::MergeFrom(const TestConn2Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.test.pb.TestConn2Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      tp1_ = from.tp1_;
    }
    if (cached_has_bits & 0x00000002u) {
      hops1_ = from.hops1_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_or_relay_ = from.send_or_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConn2Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.test.pb.TestConn2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConn2Response::CopyFrom(const TestConn2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.test.pb.TestConn2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConn2Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TestConn2Response::Swap(TestConn2Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConn2Response::InternalSwap(TestConn2Response* other) {
  using std::swap;
  swap(tp1_, other->tp1_);
  swap(hops1_, other->hops1_);
  swap(send_or_relay_, other->send_or_relay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestConn2Response::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace test
}  // namespace kadmlia
}  // namespace top
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::AllNodes_Node* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::AllNodes_Node >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::AllNodes_Node >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::AllNodes* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::AllNodes >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::AllNodes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::TestReportNodes* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::TestReportNodes >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::TestReportNodes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::TestConnRequest* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::TestConnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::TestConnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::TestConnResponse* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::TestConnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::TestConnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::TestConn2Request* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::TestConn2Request >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::TestConn2Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::top::kadmlia::test::pb::TestConn2Response* Arena::CreateMaybeMessage< ::top::kadmlia::test::pb::TestConn2Response >(Arena* arena) {
  return Arena::CreateInternal< ::top::kadmlia::test::pb::TestConn2Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
